---
import CustomGrid from "../components/CustomGrid.astro";
import Layout from "../layout.astro";
import ReadyWorks from "../components/ReadyWorks.astro";
import qs from "qs";
import Icon from "../components/Icon.astro";
import PortfolioSprite from "../sprites/PortfolioSprite.astro";
import SEOBlock from "../components/SEOBlock.astro";
import cleanHtml from "../scripts/cleanHtml";
import ZeroLayout from "../ZeroLayout.astro";

export async function getStaticPaths() {
  const paramsPage = {
    populate: {
      PreviewSourceImageArray: {
        populate: "*"
      },
      packages: {
        populate: "*"
      },
      description: {
        populate: "*"
      },
      drawing: {
        populate: "*"
      },
      package_types: {
            populate: "*"
      }
    }
  }
  const queryStringPage1 = qs.stringify(paramsPage, { encode: true });
  const response = await fetch(
    `${import.meta.env.HOST_API}/packages?${queryStringPage1}`
  );
  const data = await response.json();

  return data?.data?.map((card) => {
    let slug = card?.href?.replace("https://fineartbox.ru/", "")
      ? card?.href.replace("https://fineartbox.ru/", "")
      : "";
    if (slug)
      return {
        params: { slug: slug },
        props: { card },
      };
  });
}

const { slug } = Astro.props;
const { card } = Astro.props;

const response1 = await fetch(
  `${import.meta.env.HOST_API}/packages?populate[PreviewSourceImageArray][populate]=*`
);
const data1 = await response1.json();
---

<ZeroLayout title={card?.title}>
  <div class="fab-page">
    <div class="content-grid">
      <div class="fab-product-portfolio" style="--position: 1">
        <div class="fab-product-portfolio-left">
          <div
            class="splide fab-product-portfolio-preview"
            aria-labelledby="carousel-heading"
            id="main-slider"
          >
            <div class="splide__track">
              <ul class="splide__list">
                {
                  card?.PreviewSourceImageArray?.map((item) => (
                    <>
                      <li class="splide__slide">
                        <img src={`${item.src}`} />
                      </li>
                    </>
                  ))
                }
              </ul>
            </div>
          </div>
        </div>

        <div class="fab-product-portfolio-right">
          {
            card?.PreviewSourceImageArray?.length > 1 && <div class="fab-custom-scrollbar">
            <div class="fab-custom-scrollbar__thumb"></div>
          </div>
          }
          
          <div
            class="splide fab-product-portfolio-thumbs"
            aria-labelledby="carousel-heading"
            id="thumbnail-slider"
          >
            <div class="splide__track">
              <ul class="splide__list">
                {
                  card?.PreviewSourceImageArray?.map((item) => (
                    <>
                      <li class="splide__slide">
                        <img src={`${item.src}`} />
                      </li>
                    </>
                  ))
                }
              </ul>
            </div>
            <div class="splide__arrows">
              <button class="splide__arrow splide__arrow--prev">
                <Icon id="arrow-slider" width="20" height="40" />
              </button>
              <button class="splide__arrow splide__arrow--next">
                <Icon id="arrow-slider" width="20" height="40" />
              </button>
            </div>
          </div>
        </div>
      </div>
      <section>
        <h1>{card?.title}</h1>
        <CustomGrid columns="2">
          <div set:html={cleanHtml(card?.description?.columnOne)} />
          <div set:html={cleanHtml(card?.description?.columnTwo)} />
        </CustomGrid>
        <CustomGrid columns="2">
          <div>
            <h2>Процесс изготовления</h2>
            <p>
              Производство коробок крышка-дно включает в себя несколько ключевых
              этапов. Изготовление начинается с создания проекта.
            </p>
            <p>
              Вы можете воспользоваться одним из стандартных вариантов формы и
              размера и добавить свою декоративную обработку, или продумать
              дизайн с нуля, получив нечто совершенно новое, в корпоративном
              стиле. Чтобы убедиться, что результат соответствует
              первоначальному плану, типография может подготовить прототип.
            </p>
            <p>
              Следующим этапом является выбор материала — обычно используют
              плотный картон или дизайнерскую бумагу, в зависимости от
              назначения коробки и желаемого визуального эффекта. Затем
              проводится вырубка: на специальном оборудовании листы картона
              нарезаются по заданному шаблону, включая элементы крышки и
              донышка. После этого детали проходят процесс биговки — нанесения
              линий сгиба, благодаря которым коробка легко и аккуратно
              собирается.
            </p>
            <p>
              На этапе печати и отделки применяется множество техник: тиснение,
              ламинация, выборочный лак, фольгирование и другие виды
              декоративной обработки. Это придаёт коробке уникальность и
              повышает её привлекательность. Далее следует ручная или
              автоматизированная сборка, после чего изделия упаковываются и
              подготавливаются к отправке заказчику. Таким образом, производство
              коробок крышка-дно — это комплексный процесс, сочетающий
              технологии, дизайн и внимание к деталям.
            </p>
          </div>
          <div>
            <code>
              {JSON.stringify(card?.title)}
            </code>
            <h2>Конструкция в чертеже</h2>
            {
              card?.package_types[0]?.drawing && (
                <img class="fab-package-drawing" src={`${card?.package_types[0].drawing}`} />
              )
            }
            <p>Для запроса стоимости и заказа тиража просим указать:</p>
            <div>
              <ul>
                <li>
                  размеры коробки в сантиметрах или миллиметрах, ШГВ (ширина,
                  глубина, высота);
                </li>
                <li>
                  тип и конструкцию коробки (самосборная, клееная, с обтяжкой);
                </li>
                <li>вид и вес содержимого, нужен ли ложемент;</li>
                <li>требуемое количество и сроки.</li>
              </ul>
            </div>
          </div>
        </CustomGrid>
      </section>
      {
        card?.packages?.length > 0 && (
          <section>
            <h2>Реализованные работы</h2>
            {<ReadyWorks arrayImages={card?.PreviewSourceImageArray} packages={card?.packages} />}
          </section>
        )
      }
      {card?.SEOBlock?.oneColumn && <SEOBlock {...card.SEOBlock} />}
    </div>
  </div>
  <PortfolioSprite />

  <style lang="scss" is:global>
    .fab-product-portfolio-buttons
      div:first-child
      :is(a, button):hover
      svg
      path {
      fill: var(--color-white);
    }
    .fab-product-portfolio-buttons
      div:last-child
      :is(a, button):hover
      svg
      path {
      fill: var(--color-orange);
    }
    .splide {
      margin: 0 auto;
    }

    :is(.fab-product-portfolio-preview, .fab-product-portfolio-thumbs) img {
      height: 100%;
    }

    .splide__slide {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 24px;
      font-weight: bold;
      color: #fff;
      background-size: cover;
      background-position: center;
    }

    .splide__arrow {
      background: transparent;
    }

    #main-slider {
      height: 100%;
      margin-bottom: 20px;
    }

    #main-slider .splide__slide {
      height: 100%;
      font-size: 28px;
    }

    #main-slider .splide__track {
      height: 100%;
    }

    #thumbnail-slider {
      @media (min-width: 768px) {
        height: auto;
      }
    }

    #thumbnail-slider .splide__slide {
      height: 100px;
      font-size: 16px;
      margin: 0;
      border: 0;
    }

    .fab-product-portfolio {
      width: 100%;
      height: min(50vh, 640px);
      margin: 0 auto;
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
      gap: 20px;
      @media (min-width: 768px) {
        display: grid;
        grid-template-columns: 5fr 1fr;
      }
    }
    .fab-product-portfolio .fab-product-portfolio-left {
      width: 100%;
      overflow: hidden;
      flex: 1;
    }

    .fab-product-portfolio .fab-product-portfolio-right {
      width: 100%;
      margin-left: auto;
      @media (min-width: 768px) {
        overflow: hidden;
      }
    }

    .fab-product-portfolio-thumbs {
      @media (max-width: 767.99px) {
        display: none;
      }
    }

    .fab-custom-scrollbar {
      --position-scroll: calc((var(--position) - 1) * (100% / var(--count)));
      position: relative;
      height: 4px;
      background-color: var(--color-gray-1);
      @media (min-width: 768px) {
        display: none;
      }
    }

    .fab-custom-scrollbar__thumb {
      transition: var(--transition-default);
      position: absolute;
      bottom: 0;
      background-color: var(--color-gray-2);
      width: calc(100% / var(--count));
      left: var(--position-scroll);
      height: 8px;
      clip-path: polygon(5px 0%, 100% 0, calc(100% - 5px) 100%, 0 100%);
    }

    .fab-package-drawing {
      background-color: var(--color-gray-1);
    }

    #main-slider {
      width: 100%;
      height: 100%;
    }

    #thumbnail-slider {
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    #thumbnail-slider .splide__list {
      display: flex;
      @media (min-width: 768px) {
        flex-direction: column;
      }
    }

    #thumbnail-slider .splide__slide {
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 14px;
      font-weight: bold;
      color: #fff;
      height: 100px;
      background-repeat: no-repeat;
      background-size: cover;
      opacity: 0.5;
      overflow: hidden;

      &::before,
      &::after {
        content: "";
        position: absolute;
        width: 0px;
        height: 0px;
        border-style: solid;
        transform: rotate(0deg);
        left: 0px;
        transition: var(--transition-default);
      }
      &::before {
        border-width: 1rem 0 1rem 1rem;
        border-color: transparent transparent transparent transparent;
      }
      &::after {
        border-width: 0.75rem 0 0.75rem 0.75rem;
        border-color: transparent transparent transparent transparent;
      }
    }

    #thumbnail-slider .splide__slide.is-active {
      background-color: #fff;
      color: #007bff;
      opacity: 1;
      border-color: transparent;
      &::before,
      &::after {
        content: "";
        position: absolute;
        width: 0px;
        height: 0px;
        border-style: solid;
        transform: rotate(0deg);
        left: 0px;
      }
      &::before {
        border-width: 1rem 0 1rem 1rem;
        border-color: transparent transparent transparent var(--color-white);
      }
      &::after {
        border-width: 0.75rem 0 0.75rem 0.75rem;
        border-color: transparent transparent transparent var(--color-orange);
      }
    }
  </style>
  <!-- <script src="./splide.min.js" is:inline></script>
  <script src="../splide.min.js" is:inline></script> -->
  <script>
    var main = new Splide("#main-slider", {
      type: "fade",
      pagination: false,
      arrows: false,
      cover: false,
    });

    var thumbnails = new Splide("#thumbnail-slider", {
      type: "slide",
      pagination: false,
      isNavigation: true,
      height: "100%",
      perPage: 1,
      perMove: 1,
      wheel: true,
      mediaQuery: "min",
      fixedHeight: `6rem`,
      gap: `1rem`,
      cover: false,
      breakpoints: {
        0: {
          fixedWidth: `20%`,
          destroy: true,
        },
        768: {
          direction: "ttb",
          fixedHeight: `calc(33% - 0.5rem)`,
          dragMinThreshold: "",
          fixedWidth: `100%`,
          destroy: false,
        },
      },
    });

    main.sync(thumbnails);
    main.mount();
    thumbnails.mount();
    document
      .querySelector(".fab-product-portfolio")
      .style.setProperty("--count", main.length);

    main.on("move", function (e) {
      document
        .querySelector(".fab-product-portfolio")
        .style.setProperty("--position", e + 1);
    });
  </script>

  <script>
    function onFormLoaded() {
      document.querySelectorAll(".b24-form-control-label").forEach((el) => {
        let input = el.previousSibling?.parentNode.children[0];
        if (el.innerText.includes("Название страницы")) {
          input.value = `${document.title}`;
          input.value = document.title;
        }
        if (el.innerText.includes("Сайт")) {
          input.value = document.location.href;
        }
        if (
          el.innerText.includes("Название страницы") ||
          el.innerText.includes("Сайт")
        ) {
        }
      });
    }

    const config = { childList: true, subtree: true };

    const observer = new MutationObserver((mutationsList) => {
      for (let mutation of mutationsList) {
        if (mutation.type === "childList") {
          const form = document.querySelector(".b24-form-wrapper");
          if (form) {
            onFormLoaded();
            observer.disconnect();
            break;
          }
        }
      }
    });

    observer.observe(document.body, config);
  </script>
</Layout>
