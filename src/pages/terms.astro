---
import CustomGrid from "../components/CustomGrid.astro";
import OneHero from "../components/OneHero.astro";
import Layout from "../layout.astro";
import qs from "qs";
import replaceSpacesAfterPrepositions from "../scripts/words";

import sanitizeHtml from 'sanitize-html';
const cleanHtml = (rawHtml: any) => sanitizeHtml(rawHtml, {
       allowedTags: ['p', 'h1', 'h2' ,'br', 'strong', 'ol', 'ul', 'li', 'br', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'img'], // Разрешенные теги
       allowedAttributes: {
        'a': ['href'],
        'img': ['src'],
        'table': ['cellspacing']
       } // Разрешенные атрибуты
   });
   const prepositions = /\b(в|на|за|под|с|к|о|от|до|для|по|через|или|при|между)\b/g;
   const addNonBreakingSpace = (text) => {
        return text.replace(prepositions, (match) => `${match}\u00A0`);
   };



const Banner = {
    Banner: {
        backgoundDesktop: "https://static0.wow2print.com/storage/119/content/image/1345117144685e4e06316485.63666809.webp",
        backgroundMobile: "https://static0.wow2print.com/storage/119/content/image/1345117144685e4e06316485.63666809.webp"
    }
}

const paramsPage = {
    populate: "*",
};

const queryStringPage = qs.stringify(paramsPage, { encode: true });
const landingPageData = await fetch(`${import.meta.env.HOST_API}/dictionary?${queryStringPage}`).then(res => res.json());
const pageData = landingPageData.data;


---

<Layout title="Словарь терминов">
  <div class="fab-page">
    <div class="content-grid">
      <OneHero {...Banner}  />
      <!-- <code>
        {
          JSON.stringify(pageData.Content)
        }
      </code> -->

      <div class="fab-terms">
        <h1>Словарь терминов</h1>
        {
          pageData?.Content?.map( block =>
            <div class="fab-terms-block">
              <>
                {
                  block.__component == "ui.html-block" &&
                    <div class="fab-terms-block-head">
                      <h2 class="h3" set:html={block.title}></h2>
                      {
                        block.subtitle &&
                          <CustomGrid columns="2">
                            <h3 class="fab-terms-subtitle" set:html={block.subtitle}></h3>
                          </CustomGrid>
                      }
                    </div>
                }
                {
                  block.__component == "grids.seo-block" &&
                      <CustomGrid columns="2">
                        <div set:html={replaceSpacesAfterPrepositions(cleanHtml(block?.columnOne))} />
                        <div set:html={replaceSpacesAfterPrepositions(cleanHtml(block?.columnTwo))} />
                      </CustomGrid>
                }
              </>
            </div>
          )
        }
      </div>
  </div>
</Layout>

<style lang="scss" is:global>
  .fab-terms {
    & h1 {
      margin: 0 0 1.2em;
    }
  }
  .fab-terms-block {
    position: relative;
    font-size: 1rem;
    // & :is(dt, dd) {
    //   display: inline;
    //   margin: 0;
    // }
    // & dl {
    //   margin: 0;
    // }
    // & dd {
    //   font-weight: 400;
    // }
    // & dd::before {
    //   content: " — ";
    // }
    // & dt {
    //   font-weight: 700;
    // }
    & table {
      width: 100%;
      border: none;
      & :is(th, td) {
        border-bottom: 1px dashed var(--color-gray-2);
        padding: .75em .625em;
        text-align: left;
      }
    }
    & ul {
      padding: 0 0 0 1.1em;
      & li::marker {
        color: var(--color-violet-2);
      }
    }
  }
  .fab-terms-block {
    &:not(:nth-of-type(1)) {
      margin: 2rem 0 0;
    }
  }
  .fab-terms-block-head {
    display: flex;
    flex-direction: column;
    row-gap: 1rem;

    & h2 {
      font-family: var(--second-family)
    }
  }
  .fab-terms-subtitle {
    font-size: 1.25rem;
    font-weight: 500;
    font-family: var(--font-family);
  }
</style>
