---
import qs from "qs";
import Announce from "../../components/Announce.astro";
import BlogRoot from "../../components/Blog/BlogRoot.astro";
import DeadlineRoot from "../../components/Deadlines/DeadlineRoot.astro";
import StageWorkRoot from "../../components/StagesWorks/StageWorkRoot.astro";
import Layout from "../../layout.astro";
import SpriteFeature from "../../SpriteFeature.astro";
import YandexWidget from "../../components/YandexWidget.astro";
import SEOBlock from "../../components/SEOBlock.astro";
import Footer from "../../components/Footer.astro";
import HeroPackage from "../../components/Hero/Package.astro";
import BlockText from "../../components/BlockText.astro";
import ReadyWorks from "../../components/ReadyWorks.astro";
import ConstructionLinks from "../../components/ConstructionLinks.astro";
import SpriteConstructions from "../../SpriteConstructions.astro";
import SubscribeBlock from "../../components/SubscribeBlock.astro";
import AccordeonCards from "../../components/AccordeonBlock/AccordeonCards.astro";

export function getStaticPaths() {
  return [
    { params: { slug: "krishka-dno" }},
  ];
}

const { slug } = Astro.params;

const paramsPage = {
    filter: {
        slug: slug
    },
    populate: {
        Slider: {
            populate: "*"
        },
        readyProjects: {
            populate: "*"
        },
        descriptions: {
            populate: "*"
        },
        cardsSection: {
            populate: "*"
        }
	},
};

const queryStringPage = qs.stringify(paramsPage, { encode: true });
const landingPageData = await fetch(`${import.meta.env.HOST_API}/constructions/?${queryStringPage}`).then(res => res.json());
const pageData = landingPageData.data[0];
---

<Layout title="Упаковка крышка-дно">
    <div class="content-grid">    
            <HeroPackage {...pageData}  />
            <ConstructionLinks {slug} />
            <ReadyWorks {...pageData.readyProjects} />
            <div class="fab-widgets">
                {
                    pageData.descriptions.map( b => <>
                        <BlockText {...b} />
                    </>)
                }
            </div>
            {
                pageData.cardsSection.map( accordeon => <AccordeonCards {...accordeon} /> )
            }
            <DeadlineRoot />
            <StageWorkRoot />
            <SubscribeBlock status="default" />
            <SEOBlock />

</div>
</Layout>


<style lang="scss" is:global>
	.fab-widgets {
		display: flex;
		flex-direction: column;
		row-gap: 2rem;
		@media (min-width: 992px) {
			display: grid;
			grid-template-columns: 14fr 9fr;
			gap: var(--global-gap);
		}
	}
</style>