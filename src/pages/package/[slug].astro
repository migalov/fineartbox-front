---
import qs from "qs";
import Announce from "../../components/Announce.astro";
import BlogRoot from "../../components/Blog/BlogRoot.astro";
import DeadlineRoot from "../../components/Deadlines/DeadlineRoot.astro";
import StageWorkRoot from "../../components/StagesWorks/StageWorkRoot.astro";
import Layout from "../../layout.astro";
import SpriteFeature from "../../SpriteFeature.astro";
import YandexWidget from "../../components/YandexWidget.astro";
import SEOBlock from "../../components/SEOBlock.astro";
import Footer from "../../components/Footer.astro";
import HeroPackage from "../../components/Hero/Package.astro";
import BlockText from "../../components/BlockText.astro";
import ReadyWorks from "../../components/ReadyWorks.astro";
import ConstructionLinks from "../../components/ConstructionLinks.astro";
import SpriteConstructions from "../../SpriteConstructions.astro";
import SubscribeBlock from "../../components/SubscribeBlock.astro";
import AccordeonCards from "../../components/AccordeonBlock/AccordeonCards.astro";
import OneHero from "../../components/OneHero.astro";

export function getStaticPaths() {
  return [
    { params: { slug: "krishka-dno" }},
    { params: { slug: "magnet-print" }},
    { params: { slug: "penal" }},
    { params: { slug: "transformer" }},
    { params: { slug: "advent" }},
    { params: { slug: "board-game" }},
    { params: { slug: "suitcase" }},
    { params: { slug: "books" }},
    { params: { slug: "paper-bags" }},
    { params: { slug: "cardboard" }},
    { params: { slug: "test" }}
  ];
}

const { slug } = Astro.params;

const paramsPage = {
    filters: {
        slug: {
            $eq: slug
        }
    },

    populate: {
        Banner: {
            populate: "*"
        },
        packageTypes: {
            populate: {
                packages: {
                    populate: "*"
                }
            }
        }
    }
};

const queryStringPage = qs.stringify(paramsPage, { encode: true });
const landingPageData = await fetch(`${import.meta.env.HOST_API}/constructions/?${queryStringPage}`).then(res => res.json());
const pageData = landingPageData?.data[0];
---

<Layout title={pageData.title}>
    <!-- <code>
{JSON.stringify(pageData)}
</code> -->
    <!-- <script>
(function(w, d, s, o){
  var j = d.createElement(s); j.async = true; j.src = '//script.marquiz.ru/v2.js';j.onload = function() {
    if (document.readyState !== 'loading') Marquiz.init(o);
    else document.addEventListener("DOMContentLoaded", function() {
      Marquiz.init(o);
    });
  };
  d.head.insertBefore(j, d.head.firstElementChild);
})(window, document, 'script', {
    host: '//quiz.marquiz.ru',
    region: 'ru',
    id: '684ee254f13a8d0019d0a865',
    autoOpen: false,
    autoOpenFreq: 'once',
    openOnExit: false,
    disableOnMobile: false
  }
);
</script> -->
    <div class="content-grid">
        <!-- <code>
            {JSON.stringify(pageData.Banner)}
        </code> -->
        <div data-marquiz-id="684ee254f13a8d0019d0a865"></div>
           <!-- <script>(function(t, p) {window.Marquiz ? Marquiz.add([t, p]) : document.addEventListener('marquizLoaded', function() {Marquiz.add([t, p])})})('Button', {id: '684ee254f13a8d0019d0a865', buttonText: 'Заказать', bgColor: 'var(--color-orange)', textColor: 'var(--color-white)'})</script>
             -->
            <OneHero {...pageData} />
            <ConstructionLinks {slug} {...pageData} />
            <Announce
                maxWidthBlock="58rem"
                colorMark="var(--color-orange)"
                marginBlock="0 0 0 clamp(0rem, -13.2857rem + 21.4286vw, 6rem)"
                text={pageData?.announce}
            />
            <section>
                <h2>Реализованные проекты</h2>
                    <!-- <ReadyWorks {...pageData?.readyProjects[0]} id="1" />
                    <ReadyWorks {...pageData?.readyProjects[1]} id="2" /> -->
            </section>

            <!-- <div class="fab-widgets">
                {
                    pageData?.descriptions?.map( b => <>
                        <BlockText {...b} />
                    </>)
                }
            </div> -->
            <!-- {
                pageData?.cardsSection.map( (accordeon, num) => <AccordeonCards {...accordeon} {num} /> )
            } -->
            <DeadlineRoot />
            <StageWorkRoot />
            <!-- <SubscribeBlock status="default" /> -->
            <SEOBlock {...pageData?.SEO} />


</div>
            <div set:html={pageData?.SVGSprite}></div>
</Layout>


<style lang="scss" is:global>
	.fab-widgets {
		display: flex;
		flex-direction: column;
		row-gap: 2rem;
		@media (min-width: 992px) {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: var(--global-gap);
		}
	}
    .fab-announce {
        margin: 0 auto!important;
        max-width: 34rem!important;
    }
    .fab-announce h2 {
        font-size: 1.5rem;
        line-height: 1.5;
    }
</style>

<style lang="scss" is:global>
    .marquiz__container {
        --triangle-width: 64px;
        position: fixed;
        top: 25rem;
        left: 0;
        transform: rotate(-90deg);
        z-index: 4;
        width: fit-content;
        transform-origin: 0 0;
        clip-path: polygon(100% 0, calc(100% - var(--triangle-width)) 100%, 0% 100%, var(--triangle-width) 0%);


    }
    .marquiz__button {
        position: relative;
        background-color: var(--color-orange);
        font-size: 2rem;
        font-family: var(--second-family);
        font-weight: 700;
        padding: .5em 2.7em;
    }
</style>

<script>
    const projects = document.querySelectorAll(".fab-ready-works");
    const hideProjects = () => {
        projects.forEach(project => project.style.display = "none")
    }

    document.querySelectorAll(".constructions-switch input").forEach(input => {
        input.addEventListener("click", (e) => {
            hideProjects()
            document.querySelector(`[data-id=${e.target.id}]`).style.display = "";
        })
    })
</script>