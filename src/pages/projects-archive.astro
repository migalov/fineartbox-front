---
import Breadcrumbs from "../components/Breadcrumbs.astro";
import Icon from "../components/Icon.astro";
import Layout from "../layout.astro";
import qs from "qs";
import PortfolioSprite from "../sprites/PortfolioSprite.astro";
import ButtonDefault from "../components/Button/ButtonDefault.astro";
const paramsPage = {
    populate: "*"
};
const paperBugsParameters = {
  populate: "*"
};

const queryStringPage = qs.stringify(paramsPage, { encode: true });
const landingPageData = await fetch(`${import.meta.env.HOST_API}/packages?${queryStringPage}`).then(res => res.json());
const pageData = landingPageData.data;
const typesArray = await fetch(`${import.meta.env.HOST_API}/package-types`).then(res => res.json());
const formsArray = await fetch(`${import.meta.env.HOST_API}/package-forms`).then(res => res.json());
const appointmentsArray = await fetch(`${import.meta.env.HOST_API}/package-appointments`).then(res => res.json());
const paperBagsArray = await fetch(`${import.meta.env.HOST_API}/paper-bags?populate=*`).then(res => res.json());

---

<Layout title="Портфолио">
    <div class="content-grid">
      <code>
        {
          JSON.stringify(pageData[0].package_types[0].drawing)
        }
      </code>
        <Breadcrumbs />
       <div class="fab-filters">
      <!-- Кастомный селект: Тип -->
      <div class="fab-select-wrapper">
        <div id="typeToggle" class="fab-select-button">
          <span id="typeLabel">Тип</span>
          <span><Icon id="dropdown-arrow" width="12" height="8"></span>
        </div>
        <ul id="typeOptions" class="fab-select-list">
          <li data-tag="">Тип</li>
          {
            typesArray.data.map( type => 
                <li data-tag={type?.tag}>{type?.title}</li>
            )
          }
        </ul>
      </div>

      <!-- Кастомный селект: Назначение -->
      <div class="fab-select-wrapper">
        <div id="purposeToggle" class="fab-select-button">
          <span id="purposeLabel">Назначение</span>
          <span><Icon id="dropdown-arrow" width="12" height="8"></span>
        </div>
        <ul id="purposeOptions" class="fab-select-list">
          <li data-tag="">Назначение</li>
          {
            appointmentsArray.data.map( type => 
                type.tag !== "for-bottles" && <li data-tag={type?.tag}>{type?.title}</li>
            )
          }
        </ul>
      </div>

      <!-- Кастомный селект: Форма -->
      <div class="fab-select-wrapper">
        <div id="shapeToggle" class="fab-select-button">
          <span id="shapeLabel">Форма</span>
          <span><Icon id="dropdown-arrow" width="12" height="8"></span>
        </div>
        <ul id="shapeOptions" class="fab-select-list">
          <li data-tag="">Форма</li>
          {
            formsArray.data.map( type => 
                <li data-tag={type?.tag}>{type?.title}</li>
            )
          }
        </ul>
      </div>

      <!-- Кастомный селект: Форма -->
      <div class="fab-select-wrapper">
        <div id="paperToggle" class="fab-select-button">
          <span id="paperLabel">Бумажные пакеты</span>
          <span><Icon id="dropdown-arrow" width="12" height="8"></span>
        </div>
        <ul id="paperOptions" class="fab-select-list">
          <li data-tag="">Бумажные пакеты</li>
          {
            paperBagsArray.data.map( type => 
                <li data-tag={type?.tag}>{type?.title}</li>
            )
          }
        </ul>
      </div>

    </div>
        <div class="fab-portfolio-grid">
          {
            pageData?.map( (pkg) => 
              <a
                href={pkg?.href?.replace("https://fineartbox.ru","")}
                style="--desktop-columns: 3"

                data-type={pkg?.package_types.map( type => `${type.tag}` )}
                data-purpose={pkg?.package_appointment?.tag}
                data-shape={pkg?.package_form?.tag}
                data-paper={pkg?.paperBags.map( type => `${type?.tag}` )}

                
              >
                <img
                  data-src={pkg?.srcAlternative ? pkg?.srcAlternative : pkg?.PreviewSourceImageArray[0]?.src}
                  alt={pkg?.title}
                  title={pkg?.title}
                  
                  />
              </a>

            )
          }

        </div>
    </div>

  <PortfolioSprite />
</Layout>

<style lang="scss" is:global>
.fab-filters {
      display: grid;
      grid-template-columns: 1fr;
      gap: 16px;
      margin: 0 0 -1rem;
      position: sticky;
      background: var(--color-white);
      top: var(--header-height);
      border: 1px solid var(--color-white);
      padding: 1rem 0;
      width: calc(100% + 1px);
      z-index: 2;
      @media (min-width: 768px) {
        top: 0;
      }
    }
    @media (min-width: 768px) {
      .fab-filters {
        grid-template-columns: repeat(4, 1fr);
      }
    }

    .fab-select-wrapper {
      position: relative;
    }
    .fab-select-button {
      width: 100%;
      padding: 8px 12px;
      background: var(--color-gray-1);
      border-bottom: 1px solid var(--color-gray-2);
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: var(--color-gray-5);
      cursor: pointer;
    }
    .fab-select-list {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      z-index: 10;
      width: 100%;
      background: var(--color-gray-1);
      border: 1px solid #ccc;
      border-radius: 0;
      margin-top: -1px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      max-height: 50vh;
      overflow-y: auto;
      list-style-type: none;
      padding: 0;
    }
    .fab-select-list li {
      padding: 8px 12px;
      cursor: pointer;
      transition: var(--transition-default);
      &.active {
        background-color: var(--color-gray-5);
        color: var(--color-white);
        cursor: not-allowed;
        pointer-events: none;
      }
    }
    .fab-select-list li:hover {
      background-color:  var(--color-gray-2);
    }


    .fab-portfolio-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: var(--global-gap);
      @media (min-width: 992px) {
        grid-template-columns: repeat(3, 1fr);
      }
      @media (min-width: 1200px) {
        grid-template-columns: repeat(12, 1fr);
        & > :is(a, div) {
          grid-area: auto / span var(--desktop-columns);
        }
      }
      & > :is(a, div) {


        border: 1px solid var(--color-gray-1);
        overflow: hidden;
      }
      & a {
        display: block;
      }
      & div {
        display: flex;
        clip-path: polygon(100% 0, 100% calc(100% - 30px), calc(100% - 30px) 100%, 0 100%, 0 0);
      }
      & img:hover {
        transform: scale(1.15);
      }
    }
    .portfolio-box-text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: clamp(0.5rem, -0.3803rem + 3.7559vw, 3rem);
        background-color: var(--color-orange);
        color: var(--color-white);
        row-gap: .75rem;
        & h3 {
            font-size: 1.5rem;
        }
    }
</style>

    <script is:inline>
    let state = {
      type: '',
      purpose: '',
      shape: '',
      paper: ''
    };

      setupCustomSelect('typeToggle', 'typeOptions', 'typeLabel', 'type');
      setupCustomSelect('purposeToggle', 'purposeOptions', 'purposeLabel', 'purpose');
      setupCustomSelect('shapeToggle', 'shapeOptions', 'shapeLabel', 'shape');
      setupCustomSelect('paperToggle', 'paperOptions', 'paperLabel', 'paper');

    function filterPackages() {
      const packages = document.querySelectorAll('.fab-portfolio-grid > a');
      packages.forEach(pkg => {
        const matchesType = !state.type || pkg.dataset.type === state.type;
        const matchesPurpose = !state.purpose || pkg.dataset.purpose === state.purpose;
        const matchesShape = !state.shape || pkg.dataset.shape === state.shape;
        const paperShape = !state.paper || pkg.dataset.paper.includes(state.paper);

        pkg.style.display = (matchesType && matchesPurpose && matchesShape && paperShape) ? '' : 'none';
      });
    }

    function setupCustomSelect(toggleId, listId, labelId, key) {
      const toggle = document.getElementById(toggleId);
      const list = document.getElementById(listId);
      const label = document.getElementById(labelId);

      toggle.addEventListener('click', () => {
        document.querySelectorAll('.fab-select-list').forEach(el => {
          if (el !== list) el.style.display = 'none';
        });
        list.style.display = list.style.display === 'block' ? 'none' : 'block';
      });

      list.querySelectorAll('li').forEach(item => {
        item.addEventListener('click', () => {
          const tag = item.dataset.tag;
          state[key] = tag;
          label.textContent = item.textContent;
          list.style.display = 'none';
          list.querySelectorAll("li").forEach(_item => _item.classList.remove("active"))
          item.classList.toggle("active");
          filterPackages();
        });
      });
    }

    const clearFilter = () => {
      state = {
        type: '',
        purpose: '',
        shape: '',
        paper: ''
      };
      filterPackages();
      document.querySelectorAll(".fab-select-list").forEach( list => {
        list.querySelector("li").click();
      })
    }


    document.querySelector("#clearFilter").addEventListener("click", clearFilter);

    document.addEventListener('click', (e) => {
      if (!e.target.closest('.fab-select-wrapper')) {
        document.querySelectorAll('.fab-select-list').forEach(el => el.style.display = 'none');
      }
    });
    
  </script>