---
const { title } = Astro.props;
import "./styles/global.scss";
import "./styles/fonts.scss";
import "./styles/grid.scss";
import Sprite from "./sprite.astro";
import Header from "./components/Header.astro";
import Footer from "./components/Footer.astro";
import SpriteFeature from "./SpriteFeature.astro";
import SpriteConstructions from "./SpriteConstructions.astro";
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="stylesheet" href="/splide.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-scrollbar@latest/simple-scrollbar.css">
    <script src="https://cdn.jsdelivr.net/npm/simple-scrollbar@latest/simple-scrollbar.min.js"></script>
</head>
<body>
    <div class="fab-body">
        <Header />
        <div class="fab-page">
            <slot />
        </div>
        <Footer />
    </div>
    <Sprite />
    		<SpriteFeature />
        <SpriteConstructions />
</body>
</html>

<style lang="scss" is:global>
    astro-dev-toolbar {
        display: none;
    }
    .fab-body {
        padding-top: var(--header-height);
        display: grid;
        max-width: 1440px;
        margin: 0 auto;
        grid-template-areas: "header" "page" "footer";
        // gap: 1.5rem;
        @media (min-width: 992px) {
            grid-template-areas: "page header" "footer header";
            grid-template-columns: 6fr 2fr;
            padding-top: var(--padding-body);
        }
        @media (min-width: 1200px) {
            grid-template-areas: "page header" "footer header";
            grid-template-columns: 11fr 2fr;
        }
    }
    .fab-header {
        grid-area: header;

    }
    .fab-page {
        grid-area: page;
        padding-bottom: 2rem;
    }
	.fab-widgets {
		display: flex;
		flex-direction: column;
		row-gap: 2rem;
		@media (min-width: 992px) {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: var(--global-gap);
		}

	}
</style>

<script>
    let headerBlock = document.querySelector(".fab-header");
    const updateHeightBlock = () => {
        if (window.innerWidth < 992) {
            document.documentElement?.style.setProperty('--header-height', `${headerBlock.clientHeight}px`);
        }
        else {
            document.documentElement?.style.setProperty('--header-height', ``);
        }
        
    }
    updateHeightBlock();
    window.addEventListener("DOMContentLoaded", updateHeightBlock);
    window.addEventListener("resize", updateHeightBlock);
</script>

<script>
    let formSubscribe = document.querySelector(`.fab-subscribe-form`);
    let emailSubscribe = formSubscribe.querySelector("[type=email]");
    let submitSubscribe = formSubscribe.querySelector("[type=submit]");

    emailSubscribe.addEventListener("input", () => {
        if (emailSubscribe.checkValidity() && emailSubscribe != "") {
            submitSubscribe.disabled = false;
        }
        else {
            submitSubscribe.disabled = true;
        }
    })
</script>

<script>
	const imageObserver = new IntersectionObserver(
		(entries, observer) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					if(entry.target.hasAttribute("data-src")) {
						entry.target.src = entry.target.dataset.src;
						observer.unobserve(entry.target)
					}
					if(entry.target.hasAttribute("data-bg-src")) {
						entry.target.style.backgroundImage = `url('${entry.target.dataset.bgSrc}')`;
						observer.unobserve(entry.target);
					}
				}
			})
		},
		{
			rootMargin: "0px"
		}
	)
	document.querySelectorAll("div, img, a, iframe, li").forEach((image) => imageObserver.observe(image));
</script>